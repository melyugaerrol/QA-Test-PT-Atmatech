# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class Test2performancegeneratestatistic():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_2performancegeneratestatistic(self):
    # Test name: 2_performance_generate_statistic
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("https://brand.netray.id/")
    # 2 | setWindowSize | 1050x708 | 
    self.driver.set_window_size(1050, 708)
    # 3 | click | css=.generate-statistic-btn:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".generate-statistic-btn:nth-child(1)").click()
    # 4 | click | id=datePickerText | 
    self.driver.find_element(By.ID, "datePickerText").click()
    # 5 | mouseOver | css=.generate-statistic-btn:nth-child(1) | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".generate-statistic-btn:nth-child(1)")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 6 | click | css=.generate-statistic-btn:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".generate-statistic-btn:nth-child(1)").click()
    # 7 | mouseOut | css=.generate-statistic-btn:nth-child(1) | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 8 | click | id=datePickerText | 
    self.driver.find_element(By.ID, "datePickerText").click()
    # 9 | close |  | 
    self.driver.close()
  
